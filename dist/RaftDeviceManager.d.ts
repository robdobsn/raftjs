import { DeviceAttributeState, DevicesState, DeviceState } from "./RaftDeviceStates";
import { DeviceTypeAction } from "./RaftDeviceInfo";
import RaftSystemUtils from "./RaftSystemUtils";
import RaftDeviceMgrIF from "./RaftDeviceMgrIF";
export declare class DeviceManager implements RaftDeviceMgrIF {
    private _maxDatapointsToStore;
    private _minTimeBetweenDeviceTypeInfoRetrievalMs;
    private _attributeHandler;
    private _devicesState;
    private _deviceLastUpdateTime;
    private _removeDevicesFlag;
    private _removeDevicesTimeMs;
    private _systemUtils;
    private _callbackNewDevice;
    private _callbackNewDeviceAttribute;
    private _callbackNewAttributeData;
    getDevicesState(): DevicesState;
    getDeviceState(deviceKey: string): DeviceState;
    private _cachedDeviceTypeRecs;
    private _cachedDeviceTypePreviousAttemptTimes;
    constructor();
    sendCommand(cmd: string): Promise<boolean>;
    setup(systemUtils: RaftSystemUtils): Promise<boolean>;
    onNewDevice(callback: (deviceKey: string, state: DeviceState) => void): void;
    onNewDeviceAttribute(callback: (deviceKey: string, attrState: DeviceAttributeState) => void): void;
    onNewAttributeData(callback: (deviceKey: string, attrState: DeviceAttributeState) => void): void;
    setFriendlyName(friendlyName: string): Promise<void>;
    handleClientMsgJson(jsonMsg: string): void;
    private processStateCallback;
    private getDeviceTypeInfo;
    private toHex;
    sendAction(deviceKey: string, action: DeviceTypeAction, data: number[]): Promise<boolean>;
    sendCompoundAction(deviceKey: string, action: DeviceTypeAction, data: number[][]): Promise<boolean>;
    private hexToBytes;
}
